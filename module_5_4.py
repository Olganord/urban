"""Задача "История строительства":
Для решения этой задачи будем пользоваться решением к предыдущей задаче "Перегрузка операторов".

В классе House создайте атрибут houses_history = [], который будет хранить названия созданных объектов.

Правильней вписывать здание в историю сразу при создании объекта, тем более можно удобно обращаться к атрибутам класса используя ссылку на сам класс - cls.
Дополните метод __new__ так, чтобы:
Название объекта добавлялось в список cls.houses_history.
Название строения можно взять из args по индексу.

Также переопределите метод __del__(self) в котором будет выводиться строка:
"<название> снесён, но он останется в истории"

Создайте несколько объектов класса House и проверьте работу методов __del__ и __new__, а также значение атрибута houses_history.

Пример результата выполнения программы:
Пример выполнения программы:
h1 = House('ЖК Эльбрус', 10)
print(House.houses_history)
h2 = House('ЖК Акация', 20)
print(House.houses_history)
h3 = House('ЖК Матрёшки', 20)
print(House.houses_history)

# Удаление объектов
del h2
del h3

print(House.houses_history)

Вывод на консоль:
['ЖК Эльбрус']
['ЖК Эльбрус', 'ЖК Акация']
['ЖК Эльбрус', 'ЖК Акация', 'ЖК Матрёшки']
ЖК Акация снесён, но он останется в истории
ЖК Матрёшки снесён, но он останется в истории
['ЖК Эльбрус', 'ЖК Акация', 'ЖК Матрёшки']
ЖК Эльбрус снесён, но он останется в истории

Примечания:
Более подробно о работе метода __new__ можно узнать здесь.
В методе __new__ можно обращаться к атрибутам текущего класса при помощи параметра cls.
"""
class House:  # создание класса
    houses_history = []  # Переменная houses_history является атрибутом (свойством) класса House
    #  print(houses_history), проверка атрибута
    def __new__(cls, *args):  # Создается новый объект (экземпляр класса House);
      # def __new__(cls, *args, **kwargs): проверка: аргументы kwargs не используются.
        # аргументы будут переданы в инициализатор.
        # *args - сокращение от «arguments» (аргументы), позиционный аргумент,
        # (при инициализации получит значения name и number_of_floors).
        cls.houses_history.append(args[0])  # Поскольку объект наследует свойства класса,
        # название объекта (name) мы можем добавить (append) в список cls.houses_history.
        # name берется из args по индексу (args = [name, number_of_floors], соответственно индекс 0 имеет name).
        # print(args[0])
        return object.__new__(cls)

    def __init__(self, name, number_of_floors):  # Инициализируются аргументы (*args) созданного объекта.
        self.name = name
        self.number_of_floors = number_of_floors
        # если мы вызываем объект (self, назовем его h1)
        # h1 = House('ЖК Эльбрус', 10),
        # __init__ получит 'ЖК Эльбрус' (name) и 10 (number_of_floors) в качестве аргументов.

    def __del__(self):  # Удаление части (name) экземпляра базового класса (House).
        print(f'{self.name} снесён, но он останется в истории')
        # print(f'{self.number_of_floors} снесён, но он останется в истории'), проверка удаляемой части экземпляра.


h1 = House('ЖК Эльбрус', 10)
print(House.houses_history)
h2 = House('ЖК Акация', 20)
print(House.houses_history)
h3 = House('ЖК Матрёшки', 20)
print(House.houses_history)

# Удаление объектов
del h2
del h3

print(House.houses_history)



